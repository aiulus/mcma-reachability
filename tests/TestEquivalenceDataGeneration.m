classdef TestEquivalenceDataGeneration < matlab.unittest.TestCase
    % TestDataGeneration ensures that the trajectory data, when prepared
    % for system identification, is identical to a pre-generated "golden"
    % standard from the original script.

    properties
        GoldenData
        NewData
    end

    methods(TestClassSetup)
        function setupOnce(testCase)
            % Load the "golden" trajectory data generated by the original script.
            testCase.verifyTrue(exist('ddra_original_dat.mat', 'file') == 2, ...
                'The file ddra_original_dat.mat was not found. Please generate it first.');
            testCase.GoldenData = load('ddra_original_dat.mat');
            
            % --- Generate New Data using the refactored functions ---
            % This part replicates the data generation from compLinearDT.m.
            % For consistency, we need to use the SAME system and params as the original.
            dim_x = 5;
            A = [-1 -4 0 0 0; 4 -1 0 0 0; 0 0 -3 1 0; 0 0 -1 -3 0; 0 0 0 0 -2];
            B_ss = ones(5,1);
            sys_c = ss(A,B_ss,eye(dim_x),zeros(dim_x,1));
            samplingtime = 0.05;
            sys = c2d(sys_c,samplingtime);

            params.R0 = zonotope(ones(dim_x,1),0.1*diag(ones(dim_x,1)));
            params.U = zonotope(10,0.25);
            
            % Use settings from original a_linearDT.m
            n_k = 120; % steps
            n_m = 1;   % initpoints
            n_s = 1;   % In the original script, there is one random simulation per initial point
            
            % Seed the random number generator to match the original 'rand(''seed'',1)'
            rng(1); 
            
            % Create the test suite and then shift the trajectories
            testSuite = createTestSuite(sys, params, n_k, n_m, n_s);
            [X_0T_new, X_1T_new, ~, ~, U_full_new] = shift_trajs(testSuite);
            
            testCase.NewData.X_0T = X_0T_new;
            testCase.NewData.X_1T = X_1T_new;
            testCase.NewData.U_full = U_full_new;
        end
    end

    methods(Test)
        function testTrajectorySnapshots(testCase)
            % Test Case 2.1: Compare the newly generated snapshot matrices
            % against the golden standard.
            
            % Define a tolerance for floating-point comparisons
            tol = 1e-9;
            
            % Verify X_0T (states at time k-1)
            testCase.verifySize(testCase.NewData.X_0T, size(testCase.GoldenData.X_0T), ...
                'The size of the X_0T matrices do not match.');
            testCase.verifyThat(testCase.NewData.X_0T, ...
                matlab.unittest.constraints.IsEqualTo(testCase.GoldenData.X_0T, 'Within', matlab.unittest.tolerance.Absolute(tol)), ...
                'The state snapshot matrix X_0T does not match the golden data.');

            % Verify X_1T (states at time k)
            testCase.verifySize(testCase.NewData.X_1T, size(testCase.GoldenData.X_1T), ...
                'The size of the X_1T matrices do not match.');
            testCase.verifyThat(testCase.NewData.X_1T, ...
                matlab.unittest.constraints.IsEqualTo(testCase.GoldenData.X_1T, 'Within', matlab.unittest.tolerance.Absolute(tol)), ...
                'The state snapshot matrix X_1T does not match the golden data.');

            % Verify U_full (input trajectories)
            % NOTE: The original script's U_full might have a different dimension
            % than the one from shift_trajs due to how it's constructed.
            % This part of the test may require careful inspection of both scripts.
            % For now, we will assert they are equal.
             testCase.verifySize(testCase.NewData.U_full, size(testCase.GoldenData.U_full), ...
                'The size of the U_full matrices do not match.');
            testCase.verifyThat(testCase.NewData.U_full, ...
                matlab.unittest.constraints.IsEqualTo(testCase.GoldenData.U_full, 'Within', matlab.unittest.tolerance.Absolute(tol)), ...
                'The input trajectory matrix U_full does not match the golden data.');
        end
    end
end